{
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "rename": "Rename",
    "search": "Search",
    "placeholder": "Please input to search...",
    "enable": "enable",
    "disable": "disable",
    "empty": "No Data"
  },
  "markdown": {
    "copyCode": "Copy Code",
    "copySuccess": "Code copied to clipboard",
    "copyFailed": "Copy failed"
  },
  "message": {
    "toolCalling": "Tool calling..."
  },
  "sidebar": {
    "newConversation": "New Conversation",
    "conversations": "Conversations",
    "settings": "Settings",
    "help": "Help"
  },
  "chat": {
    "welcomeTitle": "Hello, I'm Takumi",
    "welcomeDescription": "I'm your AI programming assistant that helps improve development workflows. I can write code, optimize performance, generate tests, analyze architecture and assist with development tasks.",
    "quickStart": "Quick Start",
    "capabilities": "Takumi Capabilities",
    "greeting": "Hello, I'm Takumi, your AI programming assistant! How can I help you?",
    "analyzeProject": "Help me analyze the code structure and architecture of this project",
    "optimizeCode": "Optimize code performance and refactor this function",
    "generateTests": "Generate unit test cases and test documentation",
    "fixBugs": "Fix bugs and provide solutions",
    "askQuestions": "Ask questions, edit files, or run commands",
    "beSpecific": "Be specific for the best results",
    "createTakumiMd": "Create TAKUMI.md files to customize your interactions with Takumi",
    "llmSupport": "LLM Support",
    "llmSupportDesc": "Support for multiple LLM providers including OpenAI, Claude, Gemini, etc.",
    "fileOperations": "File Operations",
    "fileOperationsDesc": "Intelligently read, write and edit files, supporting multiple programming languages",
    "codebaseNavigation": "Codebase Navigation",
    "codebaseNavigationDesc": "Explore and search project code, quickly locate and analyze code structure",
    "planMode": "Plan Mode",
    "planModeDesc": "Break down complex tasks into manageable steps and execute plans step by step",
    "sendMessage": "Send Message",
    "thinking": "Thinking...",
    "stopGenerating": "Stop Generating",
    "inputPlaceholder": "Ask or input @ use skills"
  },
  "prompts": {
    "upgrades": "Upgrades",
    "components": "Components",
    "richGuide": "RICH Guide",
    "installationIntro": "Installation Introduction"
  },
  "context": {
    "addContext": "Add Context",
    "files": "Files",
    "selection": "Selection",
    "terminal": "Terminal",
    "git": "Git",
    "usedReferences": "Used {{count}} references",
    "unsupportedType": "Unsupported file type: {{type}}",
    "attachments": {
      "uploadError": "There's some error happened when uploading",
      "fileSizeLimited": "File size should be smaller than {{limit}}",
      "dragFileHere": "Drag file here to upload",
      "supportTypeDesc": "Support pictures and text files"
    }
  },
  "menu": {
    "rename": "Rename",
    "delete": "Delete"
  },
  "modes": {
    "agent": "Agent Mode",
    "agentDescription": "For code generation, file changes, commands and other development tasks",
    "ask": "Ask Mode",
    "askDescription": "Ask AI questions directly in terminal without file modifications",
    "plan": "Plan Mode",
    "planDescription": "Break down complex tasks into executable steps, plan first and then execute"
  },
  "plan": {
    "approveTitle": "Approve Plan Execution",
    "approveDescription": "Confirming this plan execution will switch to Agent mode",
    "approve": "Approve Plan",
    "reject": "Reject Plan",
    "confirmApprove": "Are you sure you want to approve and execute this plan?",
    "confirmReject": "Are you sure you want to reject this plan?",
    "confirmMessage": "I have confirmed the above plan, please proceed with execution"
  },
  "tool": {
    "status": {
      "executing": "Executing",
      "completed": "Completed",
      "unknown": "Unknown"
    },
    "filesFound": "Found {{count}} files",
    "moreFiles": "...{{count}} more files",
    "lines": "{{count}} lines",
    "callFailed": "Failed to call {{toolName}} tool",
    "detailInfo": "Detail Info"
  },
  "toolApproval": {
    "title": "Tool Execution Permission Confirmation",
    "description": "AI requests to execute the following tool, do you allow it?",
    "toolName": "Tool Name",
    "parameters": "Parameters",
    "approveOnce": "Allow (Once)",
    "approveAlways": "Allow (Always for this command)",
    "approveAlwaysTool": "Allow (Always for {{toolName}})",
    "deny": "Deny",
    "approved": "Tool execution approved",
    "denied": "Tool execution denied",
    "approvalOption": "Approval Option",
    "error": "Tool Approval Error",
    "errorMessage": "Error Message",
    "showParameters": "Show Parameters",
    "hideParameters": "Hide Parameters",
    "submitFailed": "Submit Failed",
    "retry": "Retry",
    "submitting": "Submitting approval result...",
    "toolDescriptions": {
      "read": "Read file: {{filePath}}",
      "bash": "Execute command: {{command}}",
      "edit": "Edit file: {{filePath}}",
      "write": "Write file: {{filePath}}",
      "fetch": "Network request: {{url}}",
      "glob": "File matching: {{pattern}}",
      "grep": "Text search: {{pattern}}",
      "ls": "List directory: {{dirPath}}",
      "default": "Tool call: {{toolName}}"
    }
  },
  "mcp": {
    "management": "MCP Management",
    "services": "MCP Services",
    "addServer": "Add MCP Server",
    "serverName": "MCP Server Name",
    "serverNamePlaceholder": "my-mcp-server",
    "transportType": "Transport Type",
    "command": "Command",
    "commandPlaceholder": "npx @example/mcp-server",
    "arguments": "Arguments",
    "argumentsPlaceholder": "--param1 value1 --param2 value2",
    "url": "URL",
    "urlPlaceholder": "http://localhost:3000",
    "environmentVariables": "Environment Variables (JSON)",
    "environmentVariablesPlaceholder": "{\"API_KEY\": \"your-key\", \"DEBUG\": \"true\"}",
    "scope": "Scope",
    "inputMode": "Input Mode",
    "project": "Project",
    "global": "Global",
    "json": "JSON",
    "form": "Form",
    "configuration": "Configuration JSON",
    "configurationPlaceholder": "Please enter configuration JSON",
    "viewFormats": "ðŸ’¡ View supported JSON formats",
    "formatComplete": "Format 1: Complete mcpServers wrapper (supports multiple servers)",
    "formatDirect": "Format 2: Direct server mapping (supports multiple servers)",
    "formatSingle": "Format 3: Single server configuration",
    "formatSSE": "Format 4: SSE Transport",
    "status": "Status",
    "name": "Name",
    "type": "Type",
    "config": "Config",
    "available": "Available",
    "noConfiguration": "No MCP configuration",
    "clickToStart": "Click \"Add Server\" to start configuring",
    "noServicesAvailable": "No services available",
    "editApiKey": "Edit API Key for {{name}}",
    "apiKeyPlaceholder": "Enter your API key",
    "apiKeyDescription": "This API key will be used to configure the {{name}} service.",
    "playwrightDescription": "Browser automation and testing",
    "figmaDescription": "Figma design integration",
    "figmaApiKeyLabel": "Figma API Key",
    "mcpManagementTitle": "MCP Management",
    "mcpServicesTitle": "MCP Services",
    "globalScope": "Global",
    "projectScope": "Project",
    "disabledStatus": "Disabled",
    "enabled": "Enabled {{name}} ({{scope}})",
    "disabled": "Disabled {{name}} ({{scope}})",
    "added": "Added {{name}} to project",
    "addedMultiple": "Added {{count}} server(s) successfully",
    "addedSingle": "Added successfully",
    "apiKeyUpdated": "API key updated successfully",
    "alreadyEnabled": "{{name}} is already enabled",
    "noCachedConfig": "No cached configuration found for {{name}} ({{scope}})",
    "loadFailed": "Failed to load MCP servers",
    "toggleFailed": "Failed to {{action}} {{name}}",
    "addFailed": "Failed to add {{name}}",
    "updateFailed": "Failed to update {{name}}",
    "configNotFound": "Configuration for {{name}} not found",
    "apiKeyRequired": "API key is required",
    "jsonFormatError": "JSON format error or failed to add",
    "addFormError": "Failed to add",
    "invalidJson": "Invalid JSON format",
    "mcpServersEmpty": "mcpServers must be a non-empty object",
    "configurationEmpty": "Configuration cannot be empty",
    "commandOrUrlRequired": "Single server config must have command or url field",
    "serverConfigObject": "Server \"{{name}}\" configuration must be an object",
    "serverCommandOrUrl": "Server \"{{name}}\" must have command or url field",
    "noServersFound": "No servers found in mcpServers object"
  },
  "settings": {
    "title": "Settings",
    "loading": "Loading settings...",
    "scope": {
      "title": "Configuration Scope",
      "global": "Global",
      "project": "Project",
      "globalDesc": "Global settings (~/.takumi/config.json)",
      "projectDesc": "Project settings (./.takumi/config.json)"
    },
    "model": {
      "title": "Model Configuration",
      "main": "Main Model",
      "mainTooltip": "Used for main code generation and complex reasoning tasks",
      "mainPlaceholder": "Select main model",
      "small": "Small Model",
      "smallTooltip": "Used for simple tasks like generating commit messages",
      "smallPlaceholder": "Select small model (optional)",
      "plan": "Plan Model",
      "planTooltip": "Used for generating execution plans",
      "planPlaceholder": "Select plan model (optional)",
      "defaultPrefix": "Default"
    },
    "behavior": {
      "title": "Behavior Configuration",
      "language": "Language",
      "languageTooltip": "Language for AI responses and interface display",
      "languagePlaceholder": "Select interface language",
      "approvalMode": "Execution Mode",
      "approvalModeTooltip": "Controls confirmation behavior when AI executes tools",
      "approvalModePlaceholder": "Select execution mode",
      "approvalModes": {
        "suggest": "Suggest Mode",
        "autoEdit": "Auto Edit",
        "fullAuto": "Full Auto"
      },
      "approvalModeLabels": {
        "suggest": "Suggest Mode - All operations require confirmation",
        "autoEdit": "Auto Edit - Auto edit files, commands require confirmation",
        "fullAuto": "Full Auto - All operations execute automatically"
      },
      "quiet": "Quiet Mode",
      "quietTooltip": "Enable non-interactive mode when activated",
      "enabled": "Enabled",
      "disabled": "Disabled"
    },
    "plugins": {
      "title": "Plugin Configuration",
      "tooltip": "Configure plugins used by the project",
      "placeholder": "Enter plugin name or path",
      "add": "Add",
      "delete": "Delete Plugin",
      "deleteConfirm": "Are you sure you want to delete plugin \"{{plugin}}\"?",
      "empty": "No plugins configured",
      "effective": "Current effective plugins",
      "none": "None"
    }
  },
  "toolRenders": {
    "read": {
      "read": "read",
      "lines": "lines"
    },
    "ls": {
      "listedItems": "Listed {{count}} items in {{path}}"
    },
    "grep": {
      "grep": "grep",
      "inFiles": "in {{count}} files"
    },
    "bash": {
      "noOutput": "No output."
    }
  },
  "senderFooterBoard": {
    "agentMode": {
      "label": "Agent Mode",
      "description": "For tasks involving code generation, file modification, running commands, or any other active development tasks"
    },
    "askMode": {
      "label": "Ask Mode",
      "description": "Allows you to ask the AI questions and get help directly in the terminal, without modifying files"
    }
  },
  "codeViewer": {
    "lineCount": "line(s)",
    "charCount": "char(s)",
    "tempFile": "Temporary File",
    "copySuccess": "Copy content successfully",
    "copyFail": "Copy content failed",
    "toolButton": {
      "nextDiff": "Next Diff",
      "prevDiff": "Previous Diff",
      "rejectAll": "Reject All",
      "acceptAll": "Accept All",
      "accept": "Accept",
      "reject": "Reject",
      "copyModifiedCode": "Copy Modified Code"
    }
  },
  "editRender": {
    "loading": "Loading...",
    "error": "Error",
    "preparingDiff": "Preparing diff..."
  },
  "messageWrapper": {
    "status": {
      "thinking": "Thinking...",
      "completed": "Completed",
      "cancelled": "Cancelled",
      "error": "Error"
    }
  }
}
